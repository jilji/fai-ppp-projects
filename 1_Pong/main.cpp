/*********************************************************************
 * Name:          main.cpp
 * Purpose:       Implements simple wxWidgets application with GUI
 *                created using wxFormBuilder.
 * Author:
 * Created:
 * Copyright:
 * License:       wxWidgets license (www.wxwidgets.org)
 *
 * Notes:         Note that all GUI creation code is implemented in
 *                gui.cpp source file which is generated by wxFormBuilder.
 *********************************************************************/

#include "main.h"
#include "util.h"
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int WinningScore = 10;

// initialize the application
IMPLEMENT_APP(MainApp);

////////////////////////////////////////////////////////////////////////////////
// application class implementation
////////////////////////////////////////////////////////////////////////////////

bool MainApp::OnInit()
{
    srand(time(NULL));
    
    SetTopWindow(new MainFrame(NULL, false));
    GetTopWindow()->Show();

    // true = enter the main loop
    return true;
}

////////////////////////////////////////////////////////////////////////////////
// main application frame implementation
////////////////////////////////////////////////////////////////////////////////

MainFrame::MainFrame(wxWindow* parent, bool showLog)
    : MainFrameBase(parent)
{
    _racquetMaxSpeed = 2;
    _racquetHeight = _racquetPlayer->GetSize().GetHeight();
    
    Bind(wxEVT_CHAR_HOOK, &MainFrame::HnadleOnKeyDown, this);
    
    if (showLog)
    {
        _log = new wxLogWindow(this, "Log");
        wxLog::SetActiveTarget(_log);
    }
    else
        _log = 0;
        
    _statusBar->PushStatusText("Start new game from the menu (or press F2).");
}

MainFrame::~MainFrame()
{
    delete _log;
}

void MainFrame::OnCloseFrame(wxCloseEvent& event)
{
    Destroy();
}

void MainFrame::OnExitClick(wxCommandEvent& event)
{
    Destroy();
}
void MainFrame::OnNewGameClick(wxCommandEvent& event)
{
    if (_gameRunning)
        return;
    
    _statusBar->PopStatusText();
    ClearScore();
    InitRound();
    
    _gameRunning = true;
    _gamePaused = false;
}

void MainFrame::OnTimerTick(wxTimerEvent& event)
{
    wxPoint bgPositionOnScreen = _pongBackground->GetScreenPosition();
    wxSize bgSize = _pongBackground->GetSize();
    
    const wxPoint pt = getMousePositionInsideArea(bgPositionOnScreen, bgSize);
    
    wxPoint newBallPosition = MoveBall();
    
    if (CheckForWinner())
    {
        StopGame();
    }
    
    MoveRacquetTowardCoordinate(_racquetPlayer, pt.y, bgSize);
    MoveRacquetTowardCoordinate(_racquetAi, newBallPosition.y, bgSize);
}

void MainFrame::MoveRacquetTowardCoordinate(wxPanel* racquet, int desiredYcoordinate,
                                           const wxSize& gameboardSize)
{
    wxSize racquetSize = racquet->GetSize();
    wxPoint racquetPosition = racquet->GetPosition();
    
    int racquetHeight = racquetSize.GetHeight();
    
    racquetPosition.y += (racquetHeight / 2);
    int difference = desiredYcoordinate - racquetPosition.y;
    int direction = signum(difference);
    
    int newPosition = racquetPosition.y + (direction * min(abs(difference), _racquetMaxSpeed));
    
    if (newPosition < 0)
    {
        newPosition = 0;
    }
        
    int gameboardHeight = gameboardSize.GetHeight();
    if (newPosition > gameboardHeight)
    {
        newPosition = gameboardHeight;
    }
    
    racquetPosition.y = newPosition; 
    racquetPosition.y -= (racquetHeight / 2);
    
    // fix the "no change" magic position
    if (racquetPosition.y == -1)
        racquetPosition.y = 0;
    
    racquet->SetPosition(racquetPosition);
}

wxPoint MainFrame::MoveBall()
{
    wxPoint ballPosition = _ball->GetPosition();
    
    ballPosition.x += _ballMovement[0];
    ballPosition.y += _ballMovement[1];
    
    wxSize bg_size = _pongBackground->GetSize();
    if (ballPosition.y + 10 > bg_size.GetHeight() || ballPosition.y < 0)
        _ballMovement[1] *= -1;
        
    if (ballPosition.x < 10)
    {
        if (DoesHitRacquet(_racquetPlayer, ballPosition.y))
        {
            BounceBallOnRacquet(_racquetPlayer, ballPosition.y + 5, 1);
        }
        else
        {
            AiScores();
            InitRound();
            return ballPosition;
        }
    }
    
    // +10 - ball width, -10 racquet width -> bounce from racquet
    if (ballPosition.x + 10 > bg_size.GetWidth() - 10)
    {
        if (DoesHitRacquet(_racquetAi, ballPosition.y))
        {
            BounceBallOnRacquet(_racquetAi, ballPosition.y + 5, -1);
        }
        else
        {
            PlayerScores();
            InitRound();
            return ballPosition;
        }
    }
        
    _ball->SetPosition(ballPosition);
    
    // return position of ball center
    ballPosition.x += 5;
    ballPosition.y += 5;
    return ballPosition;
}

bool MainFrame::DoesHitRacquet(wxPanel* racquet, int yCoord)
{
    wxPoint racquetPos = racquet->GetPosition();
    return yCoord > racquetPos.y && yCoord + 10 < racquetPos.y + _racquetHeight;
}

void MainFrame::AiScores()
{
    _score[1]++;
    _scoreAi->SetLabel(wxString::Format(wxT("%i"), _score[1]));
}

void MainFrame::StartRound()
{
    _statusBar->PushStatusText("Game running, pause it with <SPACE>", 1);
    _gameTimer.Start(10);
}

void MainFrame::InitRound()
{
    _gameTimer.Stop();
    
    while (_ballMovement[0] == 0)
        _ballMovement[0] = rand() % 6 - 3;
    
    while (_ballMovement[1] == 0)
        _ballMovement[1] = rand() % 6 - 3;
    
    _ball->Show();
    _ball->CenterOnParent();
    _racquetPlayer->CenterOnParent();
    _racquetAi->CenterOnParent();
    
    _statusBar->PushStatusText("Game ready. Press SPACE to start.");
    _waitForSpace = true;
}

void MainFrame::PlayerScores()
{
    _score[0]++;
    _scorePlayer->SetLabel(wxString::Format(wxT("%i"), _score[0]));
}

bool MainFrame::CheckForWinner()
{
    if (_score[0] >= WinningScore)
    {
        _statusBar->PushStatusText("Player wins the game! Start new game to play again.");
        return true;
    }
    
    if (_score[1] >= WinningScore)
    {
        _statusBar->PushStatusText("AI wins the game! Start new game to play again.");
        return true;
    }
    
    return false;
}

void MainFrame::HnadleOnKeyDown(wxKeyEvent& event)
{
    if (_waitForSpace && event.GetKeyCode() == WXK_SPACE)
    {
        _waitForSpace = false;
        _statusBar->PopStatusText();
        StartRound();
        
        return;
    }
    
    if (_gameRunning && event.GetKeyCode() == WXK_SPACE)
    {
        _statusBar->PopStatusText(1);
        if (_gamePaused)
        {
            _gameTimer.Start(10);
            _statusBar->PushStatusText("Game running, pause it with <SPACE>", 1);
        }
        else
        {
            _gameTimer.Stop();
            _statusBar->PushStatusText("Game paused, resume with <SPACE>", 1);
        }
        
        _gamePaused = !_gamePaused;
        return;
    }
    
    event.Skip();
}

void MainFrame::StopGame()
{
    _gameRunning = false;
    _gameTimer.Stop();
}

void MainFrame::ClearScore()
{
    _score[0] = 0;
    _scorePlayer->SetLabel(wxString::Format(wxT("%i"), _score[0]));
    _score[1] = 0;
    _scoreAi->SetLabel(wxString::Format(wxT("%i"), _score[1]));
}

void MainFrame::BounceBallOnRacquet(wxPanel* racquet, int ballCenterYCoord, int xDirection)
{
    int positionOnRacquet = ballCenterYCoord - racquet->GetPosition().y;
    
    switch (positionOnRacquet / 7)
    {
        case 0: //  0- 7 => 5,5
            SetBallMovement(xDirection * 5, 5);
            break;
            
        case 1: //  8-14 => 4,3
            SetBallMovement(xDirection * 4, 3);
            break;
            
        case 2: // 15-21 => 4,2
            SetBallMovement(xDirection * 4, 2);
            break;
            
        case 3: // 22-28 => 3,1
            SetBallMovement(xDirection * 3, 1);
            break;
            
        case 4: // 29-35 => 3,-1
            SetBallMovement(xDirection * 3, -1);
            break;
            
        case 5: // 36-42 => 4,-2
            SetBallMovement(xDirection * 4, -2);
            break;
            
        case 6: // 43-49 => 4,-3
            SetBallMovement(xDirection * 4, -3);
            break;
            
        case 7: // 50-56 => 5,-5
            SetBallMovement(xDirection * 5, -5);
            break;
    }
}

void MainFrame::SetBallMovement(int x, int y)
{
    _ballMovement[0] = x;
    _ballMovement[1] = y;
}
